// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String          @id @default(cuid())
  name               String?
  email              String          @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  // Optional for WebAuthn support
  Authenticator      Authenticator[]
  review             PeerReview?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  peerReviewId       String?
  balancedScoreCards BSC[]
  payments           Payment[]
  role               Role            @default(USER)
  organization       Organization?   @relation(fields: [organizationId], references: [id])
  position           Position?       @relation(fields: [positionId], references: [id])
  organizationId     String?
  positionId         String?
}

enum Role {
  ADMIN
  USER
}

model PeerReview {
  id        String   @id @default(uuid())
  review    String
  rating    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Position {
  id                  String     @id @default(uuid())
  jobTitle            String
  departmentalMandate String
  salaryScale         String
  reportsTo           Position?  @relation("PositionReportsTo", fields: [reportsToId], references: [id])
  reportsToId         String?
  responsibleFor      Position[] @relation("PositionReportsTo")
  duties              String[]
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @default(now()) @updatedAt
  users               User[]

  @@map("positions")
}

model Organization {
  id                   String                @id @default(uuid())
  name                 String
  voteName             String
  structure            OrganizationStructure @default(DISTRICT)
  organizationContexts OrganizationContext[]
  bSCs                 BSC[]
  users                User[]

  @@map("organizations")
}

model OrganizationContext {
  id                   String                @id @default(uuid())
  financialYear        String
  mandate              String
  vision               String
  mission              String
  goal                 String
  ndp                  Ndp?                  @relation(fields: [ndpId], references: [id], onDelete: Cascade)
  Organization         Organization?         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId       String?
  ndpId                String?
  coreValue            CoreValue?            @relation(fields: [coreValueId], references: [id])
  coreValueId          String?
  behavioralAttributes BehavioralAttribute[]

  @@map("organization_contexts")
}

model Ndp {
  id                   String                @id @default(uuid())
  version              String
  programmes           String[] // List of programmes under the NDP
  osps                 Osp[]
  organizationContexts OrganizationContext[]

  @@map("ndps")
}

model Osp {
  id                 String   @id @default(uuid())
  strategicObjective String
  strategies         String[] // List of strategies to achieve the objective
  programmes         String[] // List of programmes under the OSP
  ndp                Ndp?     @relation(fields: [ndpId], references: [id], onDelete: Cascade)
  ndpId              String?

  @@map("osps")
}

enum OrganizationStructure {
  CITY
  DISTRICT
  MUNICIPALITY
  LOCAL_GOVERNMENT
}

model Employee {
  id             String     @id @default(uuid())
  employeeNumber String
  name           String
  jobTitle       String
  salaryScale    String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  reportsTo      Employee?  @relation("PositionReportsTo", fields: [reportsToId], references: [id])
  reportsToId    String?
  responsibleFor Employee[] @relation("PositionReportsTo")

  // Relations
  supervisedBSCs BSC[] @relation("Supervisee")
  supervisorBSCs BSC[] @relation("Supervisor")

  @@unique([employeeNumber, createdAt])
  @@map("employees")
}

model BSC {
  id        String   @id @default(uuid())
  year      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Supervisee and Supervisor Relations
  superviseeId String
  supervisee   Employee @relation("Supervisee", fields: [superviseeId], references: [id])
  supervisorId String
  supervisor   Employee @relation("Supervisor", fields: [supervisorId], references: [id])

  // Strategic Elements
  mandate             String
  vision              String
  mission             String
  goal                String
  ndpProgrammes       String[] // National Development Plan Programmes
  departmentalMandate String
  strategicObjectives String[]

  // Performance Plan and Appraisal
  performanceObjectives PerformanceObjective[]
  clients               String[]

  // Behavioral Assessment
  coreValues           CoreValue             @relation(fields: [coreValueId], references: [id])
  behavioralAttributes BehavioralAttribute[]

  // Calculated Scores
  performanceScore Float            @default(0) // Out of 80%
  behavioralScore  Float            @default(0) // Out of 20%
  overallScore     Float            @default(0) // Total score
  performanceLevel PerformanceLevel @default(UNSATISFACTORY)
  coreValueId      String

  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  organizationId String?

  user     User?     @relation(fields: [userId], references: [id])
  userId   String?
  payments Payment[]

  // schedule of duty 
  scheduleOfDuty   ScheduleOfDuty? @relation(fields: [scheduleOfDutyId], references: [id], onDelete: Cascade)
  scheduleOfDutyId String?

  @@map("bscs")
}

model ScheduleOfDuty {
  id                    String           @id @default(uuid())
  positionId            String
  jobTitle              String
  location              String
  jobSummary            String
  resultAreas           String[]
  outPutActivities      OutputActivity[]
  clients               String[]
  reportingArrangements String[]
  guidingDocuments      String[]
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @default(now()) @updatedAt
  bscs                  BSC[]

  @@map("schedule_of_duties")
}

model OutputActivity {
  id               String          @id @default(uuid())
  output           String
  activities       String[]
  scheduleOfDuty   ScheduleOfDuty? @relation(fields: [scheduleOfDutyId], references: [id], onDelete: Cascade)
  scheduleOfDutyId String?

  @@map("output_activities")
}

model Payment {
  id      String @id @default(uuid())
  amount  Float
  balance Float
  bsc     BSC    @relation(fields: [bSCId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
  bSCId   String
  userId  String
}

model PerformanceObjective {
  id    String @id @default(uuid())
  bscId String
  bsc   BSC    @relation(fields: [bscId], references: [id], onDelete: Cascade)

  perspective     PerspectiveType
  objective       String
  percentage      Float
  actions         String[]
  expectedResults String[]
  kpis            String[] // Key Performance Indicators
  score           Float           @default(0)
  comments        String?

  @@unique([id, bscId])
  @@map("performance_objectives")
}

model CoreValue {
  id                   String                @id @default(uuid())
  values               ScoreValueScore[]
  acronym              String
  bscs                 BSC[]
  organizationContexts OrganizationContext[]

  @@map("core_values")
}

model ScoreValueScore {
  id          String     @id @default(uuid())
  value       String
  score       Float      @default(0)
  coreValue   CoreValue? @relation(fields: [coreValueId], references: [id])
  coreValueId String?
}

model BehavioralAttribute {
  id                    String               @id @default(uuid())
  bscId                 String?
  bsc                   BSC?                 @relation(fields: [bscId], references: [id], onDelete: Cascade)
  attribute             String
  percentage            Float
  description           String?
  score                 Float                @default(0)
  commentsJustification String?
  organizationContext   OrganizationContext? @relation(fields: [organizationContextId], references: [id], onDelete: Cascade)
  organizationContextId String?
  createdAt             DateTime             @default(now())

  @@unique([attribute, organizationContextId])
  // @@unique([attribute, bscId])
  @@map("behavioral_attributes")
}

enum PerspectiveType {
  STAKEHOLDERS_CLIENTS // 25%
  FINANCIAL_STEWARDSHIP // 15%
  INTERNAL_PROCESSES // 20%
  MDA_LG_CAPACITY // 20%
}

enum PerformanceLevel {
  OUTSTANDING // 90-100%
  VERY_GOOD // 80-89%
  GOOD // 70-79%
  SATISFACTORY // 60-69%
  UNSATISFACTORY // Below 60%
}
